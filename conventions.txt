# Contentions

- Everything is snake_case by default.
- Struct names are Camel_Case.
- Code is procedural.
- Data is data, functions are functions.
- If sometimes objects are needed (e.g. List) they are written as struct with the fields,
  functions are put in a namespace with the name of the struct and _ appended at the end.
  But the code should never be object oriented.
  Functions in the namespace should be declared only at one place.
  Functions that operate on the object elsewhere are not part of the '_'.

Example: 
-------------------------
struct String{
    // fields
};

namespace String_{
    // functions
};
-------------------------

- Private should be used sparingly
- Use namespaces for packages. Note that Core is an exception because as the name suggest 
  it's the core of the library.
- The keyword const are never to be used. Note the idea of immutability has a lot of value.
- In function signitures:
    - Pass by value means that the function doesn't mutate the data.
    - Pass by pointer means that the function mutates the data.
    - Note that the specification of the function can override this rule.
Example:
-------------------------
/*
    This mutates the list
*/
void sort(List<int>* list){
    // implement
}


/*
    This creates a copy
*/
List<int> sort_copy(List<int> list, Context context){
    // implement
}
-------------------------

- Function overload should not be used, collisions can be solved with
    - Different function names
    - Namespaces
- Operator overloading should be used sparingly, only on mathematical types.
